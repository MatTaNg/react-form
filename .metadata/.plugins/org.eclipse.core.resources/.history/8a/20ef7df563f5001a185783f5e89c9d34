package security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.ObjectListing;
import com.amazonaws.services.s3.model.S3ObjectSummary;
import com.reactform.backend.reactformbackend.Account;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.annotation.PostConstruct;

@Service
public class AccountsService {
	
	private static Map<String, Account> accounts = new HashMap<String, Account>();

//    private AmazonClient amazonClient;
    private AmazonS3 s3client;

    @Value("${amazonProperties.endpointUrl}")
    private String endpointUrl;
    @Value("${amazonProperties.bucketName}")
    private String bucketName;
    @Value("${amazonProperties.accessKey}")
    private String accessKey;
    @Value("${amazonProperties.secretKey}")
    private String secretKey;
    
	@PostConstruct
    private void initializeAmazon() {
       AWSCredentials credentials = new BasicAWSCredentials(this.accessKey, this.secretKey);
       this.s3client = new AmazonS3Client(credentials);
	}

  public List<Account> getAccounts() {
	  System.out.println("getAccounts");
        ObjectListing objectListing = s3client
        		.listObjects(bucketName);
        for(S3ObjectSummary os : objectListing.getObjectSummaries()) {
     	    System.out.println(os.getKey());
     	}
        return accounts.values().stream().collect(Collectors.toList());
  }
  public boolean addAccount(Account account) {
	  if(accounts.containsKey(account.getUserName())) {
		  return false;
	  }
	  else {
		  accounts.put(account.getUserName(), account);
		  return true;
	  }
  }
  public Account editUserName(Account account, String userName) {
	  if(accounts.containsKey(account.getUserName())) {
		  return accounts.put(userName, account);
	  }
	  return null;
  }
  public Account deleteAccount(String userName) {
	  return accounts.remove(userName);
  }
  
  public Account getByUsername(String userName) {
	  return accounts.get(userName);
  }

}
